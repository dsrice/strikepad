{
  "swagger": "2.0",
  "info": {
    "description": "This is the StrikePad backend API server.",
    "title": "StrikePad Backend API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "API Support",
      "url": "http://www.striker.com/support",
      "email": "support@striker.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/api/auth/google/login": {
      "post": {
        "description": "Authenticate user using Google OAuth",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Google OAuth login",
        "parameters": [
          {
            "description": "Google login request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.GoogleLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/dto.UserInfo"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/auth/google/signup": {
      "post": {
        "description": "Create a new user account using Google OAuth",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Google OAuth signup",
        "parameters": [
          {
            "description": "Google signup request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.GoogleSignupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/dto.SignupResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Authenticate user with email and password",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "parameters": [
          {
            "description": "Login request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/dto.LoginResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Logout current user and invalidate session",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "responses": {
          "200": {
            "description": "Logout successful",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "description": "Refresh access token using refresh token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Token refresh",
        "parameters": [
          {
            "description": "Refresh request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.RefreshRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "schema": {
              "$ref": "#/definitions/dto.RefreshResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "description": "Create a new user account with email and password",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "parameters": [
          {
            "description": "Signup request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.SignupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/dto.AuthResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/user/me": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get information about the currently authenticated user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get current user information",
        "responses": {
          "200": {
            "description": "User information",
            "schema": {
              "$ref": "#/definitions/dto.UserInfo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check if the service is healthy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Health"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "schema": {
              "$ref": "#/definitions/dto.HealthResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "dto.AuthResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2025-01-27T10:15:30Z"
        },
        "display_name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "user@example.com"
        },
        "email_verified": {
          "type": "boolean",
          "example": false
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "dto.ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dto.ValidationError"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "dto.GoogleLoginRequest": {
      "type": "object",
      "required": [
        "access_token"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "example": "ya29.a0ARrdaM..."
        }
      }
    },
    "dto.GoogleSignupRequest": {
      "type": "object",
      "required": [
        "access_token"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "example": "ya29.a0ARrdaM..."
        }
      }
    },
    "dto.HealthResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "dto.LoginRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 255,
          "example": "user@example.com"
        },
        "password": {
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "example": "password123"
        }
      }
    },
    "dto.LoginResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "dto.RefreshRequest": {
      "type": "object",
      "required": [
        "access_token",
        "refresh_token"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        },
        "refresh_token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        }
      }
    },
    "dto.RefreshResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "dto.SignupRequest": {
      "type": "object",
      "required": [
        "display_name",
        "email",
        "password"
      ],
      "properties": {
        "display_name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1,
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 255,
          "example": "user@example.com"
        },
        "password": {
          "type": "string",
          "maxLength": 128,
          "minLength": 8,
          "example": "Password123!"
        }
      }
    },
    "dto.SignupResponse": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2025-01-27T10:15:30Z"
        },
        "display_name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "user@example.com"
        },
        "email_verified": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "dto.UserInfo": {
      "type": "object",
      "properties": {
        "display_name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "email_verified": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "dto.ValidationError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "description": "Type \"Bearer\" followed by a space and JWT token.",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}