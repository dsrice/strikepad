// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dto "strikepad-backend/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockUserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type MockUserServiceInterface struct {
	mock.Mock
}

type MockUserServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceInterface) EXPECT() *MockUserServiceInterface_Expecter {
	return &MockUserServiceInterface_Expecter{mock: &_m.Mock}
}

// GetCurrentUser provides a mock function with given fields: userID
func (_m *MockUserServiceInterface) GetCurrentUser(userID uint) (*dto.UserInfo, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *dto.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*dto.UserInfo, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *dto.UserInfo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceInterface_GetCurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUser'
type MockUserServiceInterface_GetCurrentUser_Call struct {
	*mock.Call
}

// GetCurrentUser is a helper method to define mock.On call
//   - userID uint
func (_e *MockUserServiceInterface_Expecter) GetCurrentUser(userID interface{}) *MockUserServiceInterface_GetCurrentUser_Call {
	return &MockUserServiceInterface_GetCurrentUser_Call{Call: _e.mock.On("GetCurrentUser", userID)}
}

func (_c *MockUserServiceInterface_GetCurrentUser_Call) Run(run func(userID uint)) *MockUserServiceInterface_GetCurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockUserServiceInterface_GetCurrentUser_Call) Return(_a0 *dto.UserInfo, _a1 error) *MockUserServiceInterface_GetCurrentUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceInterface_GetCurrentUser_Call) RunAndReturn(run func(uint) (*dto.UserInfo, error)) *MockUserServiceInterface_GetCurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserServiceInterface creates a new instance of MockUserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
