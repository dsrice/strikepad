// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	auth "strikepad-backend/internal/auth"

	mock "github.com/stretchr/testify/mock"

	model "strikepad-backend/internal/model"
)

// MockSessionServiceInterface is an autogenerated mock type for the SessionServiceInterface type
type MockSessionServiceInterface struct {
	mock.Mock
}

type MockSessionServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionServiceInterface) EXPECT() *MockSessionServiceInterface_Expecter {
	return &MockSessionServiceInterface_Expecter{mock: &_m.Mock}
}

// CleanupExpiredSessions provides a mock function with no fields
func (_m *MockSessionServiceInterface) CleanupExpiredSessions() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CleanupExpiredSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionServiceInterface_CleanupExpiredSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupExpiredSessions'
type MockSessionServiceInterface_CleanupExpiredSessions_Call struct {
	*mock.Call
}

// CleanupExpiredSessions is a helper method to define mock.On call
func (_e *MockSessionServiceInterface_Expecter) CleanupExpiredSessions() *MockSessionServiceInterface_CleanupExpiredSessions_Call {
	return &MockSessionServiceInterface_CleanupExpiredSessions_Call{Call: _e.mock.On("CleanupExpiredSessions")}
}

func (_c *MockSessionServiceInterface_CleanupExpiredSessions_Call) Run(run func()) *MockSessionServiceInterface_CleanupExpiredSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionServiceInterface_CleanupExpiredSessions_Call) Return(_a0 error) *MockSessionServiceInterface_CleanupExpiredSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionServiceInterface_CleanupExpiredSessions_Call) RunAndReturn(run func() error) *MockSessionServiceInterface_CleanupExpiredSessions_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: userID
func (_m *MockSessionServiceInterface) CreateSession(userID uint) (*auth.TokenPair, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*auth.TokenPair, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *auth.TokenPair); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionServiceInterface_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionServiceInterface_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - userID uint
func (_e *MockSessionServiceInterface_Expecter) CreateSession(userID interface{}) *MockSessionServiceInterface_CreateSession_Call {
	return &MockSessionServiceInterface_CreateSession_Call{Call: _e.mock.On("CreateSession", userID)}
}

func (_c *MockSessionServiceInterface_CreateSession_Call) Run(run func(userID uint)) *MockSessionServiceInterface_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockSessionServiceInterface_CreateSession_Call) Return(_a0 *auth.TokenPair, _a1 error) *MockSessionServiceInterface_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionServiceInterface_CreateSession_Call) RunAndReturn(run func(uint) (*auth.TokenPair, error)) *MockSessionServiceInterface_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateAllUserSessions provides a mock function with given fields: userID
func (_m *MockSessionServiceInterface) InvalidateAllUserSessions(userID uint) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateAllUserSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionServiceInterface_InvalidateAllUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateAllUserSessions'
type MockSessionServiceInterface_InvalidateAllUserSessions_Call struct {
	*mock.Call
}

// InvalidateAllUserSessions is a helper method to define mock.On call
//   - userID uint
func (_e *MockSessionServiceInterface_Expecter) InvalidateAllUserSessions(userID interface{}) *MockSessionServiceInterface_InvalidateAllUserSessions_Call {
	return &MockSessionServiceInterface_InvalidateAllUserSessions_Call{Call: _e.mock.On("InvalidateAllUserSessions", userID)}
}

func (_c *MockSessionServiceInterface_InvalidateAllUserSessions_Call) Run(run func(userID uint)) *MockSessionServiceInterface_InvalidateAllUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockSessionServiceInterface_InvalidateAllUserSessions_Call) Return(_a0 error) *MockSessionServiceInterface_InvalidateAllUserSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionServiceInterface_InvalidateAllUserSessions_Call) RunAndReturn(run func(uint) error) *MockSessionServiceInterface_InvalidateAllUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateSession provides a mock function with given fields: accessToken
func (_m *MockSessionServiceInterface) InvalidateSession(accessToken string) error {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionServiceInterface_InvalidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateSession'
type MockSessionServiceInterface_InvalidateSession_Call struct {
	*mock.Call
}

// InvalidateSession is a helper method to define mock.On call
//   - accessToken string
func (_e *MockSessionServiceInterface_Expecter) InvalidateSession(accessToken interface{}) *MockSessionServiceInterface_InvalidateSession_Call {
	return &MockSessionServiceInterface_InvalidateSession_Call{Call: _e.mock.On("InvalidateSession", accessToken)}
}

func (_c *MockSessionServiceInterface_InvalidateSession_Call) Run(run func(accessToken string)) *MockSessionServiceInterface_InvalidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionServiceInterface_InvalidateSession_Call) Return(_a0 error) *MockSessionServiceInterface_InvalidateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionServiceInterface_InvalidateSession_Call) RunAndReturn(run func(string) error) *MockSessionServiceInterface_InvalidateSession_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: userID, accessToken
func (_m *MockSessionServiceInterface) Logout(userID uint, accessToken string) error {
	ret := _m.Called(userID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(userID, accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionServiceInterface_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockSessionServiceInterface_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - userID uint
//   - accessToken string
func (_e *MockSessionServiceInterface_Expecter) Logout(userID interface{}, accessToken interface{}) *MockSessionServiceInterface_Logout_Call {
	return &MockSessionServiceInterface_Logout_Call{Call: _e.mock.On("Logout", userID, accessToken)}
}

func (_c *MockSessionServiceInterface_Logout_Call) Run(run func(userID uint, accessToken string)) *MockSessionServiceInterface_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockSessionServiceInterface_Logout_Call) Return(_a0 error) *MockSessionServiceInterface_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionServiceInterface_Logout_Call) RunAndReturn(run func(uint, string) error) *MockSessionServiceInterface_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshSession provides a mock function with given fields: accessToken, refreshToken
func (_m *MockSessionServiceInterface) RefreshSession(accessToken string, refreshToken string) (*auth.TokenPair, error) {
	ret := _m.Called(accessToken, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSession")
	}

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*auth.TokenPair, error)); ok {
		return rf(accessToken, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) *auth.TokenPair); ok {
		r0 = rf(accessToken, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionServiceInterface_RefreshSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshSession'
type MockSessionServiceInterface_RefreshSession_Call struct {
	*mock.Call
}

// RefreshSession is a helper method to define mock.On call
//   - accessToken string
//   - refreshToken string
func (_e *MockSessionServiceInterface_Expecter) RefreshSession(accessToken interface{}, refreshToken interface{}) *MockSessionServiceInterface_RefreshSession_Call {
	return &MockSessionServiceInterface_RefreshSession_Call{Call: _e.mock.On("RefreshSession", accessToken, refreshToken)}
}

func (_c *MockSessionServiceInterface_RefreshSession_Call) Run(run func(accessToken string, refreshToken string)) *MockSessionServiceInterface_RefreshSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSessionServiceInterface_RefreshSession_Call) Return(_a0 *auth.TokenPair, _a1 error) *MockSessionServiceInterface_RefreshSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionServiceInterface_RefreshSession_Call) RunAndReturn(run func(string, string) (*auth.TokenPair, error)) *MockSessionServiceInterface_RefreshSession_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: refreshToken
func (_m *MockSessionServiceInterface) RefreshToken(refreshToken string) (*auth.TokenPair, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.TokenPair, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.TokenPair); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionServiceInterface_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockSessionServiceInterface_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockSessionServiceInterface_Expecter) RefreshToken(refreshToken interface{}) *MockSessionServiceInterface_RefreshToken_Call {
	return &MockSessionServiceInterface_RefreshToken_Call{Call: _e.mock.On("RefreshToken", refreshToken)}
}

func (_c *MockSessionServiceInterface_RefreshToken_Call) Run(run func(refreshToken string)) *MockSessionServiceInterface_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionServiceInterface_RefreshToken_Call) Return(_a0 *auth.TokenPair, _a1 error) *MockSessionServiceInterface_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionServiceInterface_RefreshToken_Call) RunAndReturn(run func(string) (*auth.TokenPair, error)) *MockSessionServiceInterface_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccessToken provides a mock function with given fields: token
func (_m *MockSessionServiceInterface) ValidateAccessToken(token string) (*model.UserSession, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 *model.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UserSession, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UserSession); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionServiceInterface_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type MockSessionServiceInterface_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - token string
func (_e *MockSessionServiceInterface_Expecter) ValidateAccessToken(token interface{}) *MockSessionServiceInterface_ValidateAccessToken_Call {
	return &MockSessionServiceInterface_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", token)}
}

func (_c *MockSessionServiceInterface_ValidateAccessToken_Call) Run(run func(token string)) *MockSessionServiceInterface_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionServiceInterface_ValidateAccessToken_Call) Return(_a0 *model.UserSession, _a1 error) *MockSessionServiceInterface_ValidateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionServiceInterface_ValidateAccessToken_Call) RunAndReturn(run func(string) (*model.UserSession, error)) *MockSessionServiceInterface_ValidateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionServiceInterface creates a new instance of MockSessionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionServiceInterface {
	mock := &MockSessionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
