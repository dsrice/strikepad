// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dto "strikepad-backend/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockHealthServiceInterface is an autogenerated mock type for the HealthServiceInterface type
type MockHealthServiceInterface struct {
	mock.Mock
}

type MockHealthServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthServiceInterface) EXPECT() *MockHealthServiceInterface_Expecter {
	return &MockHealthServiceInterface_Expecter{mock: &_m.Mock}
}

// GetHealth provides a mock function with no fields
func (_m *MockHealthServiceInterface) GetHealth() *dto.HealthResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHealth")
	}

	var r0 *dto.HealthResponse
	if rf, ok := ret.Get(0).(func() *dto.HealthResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.HealthResponse)
		}
	}

	return r0
}

// MockHealthServiceInterface_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type MockHealthServiceInterface_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
func (_e *MockHealthServiceInterface_Expecter) GetHealth() *MockHealthServiceInterface_GetHealth_Call {
	return &MockHealthServiceInterface_GetHealth_Call{Call: _e.mock.On("GetHealth")}
}

func (_c *MockHealthServiceInterface_GetHealth_Call) Run(run func()) *MockHealthServiceInterface_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHealthServiceInterface_GetHealth_Call) Return(_a0 *dto.HealthResponse) *MockHealthServiceInterface_GetHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHealthServiceInterface_GetHealth_Call) RunAndReturn(run func() *dto.HealthResponse) *MockHealthServiceInterface_GetHealth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHealthServiceInterface creates a new instance of MockHealthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthServiceInterface {
	mock := &MockHealthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
