// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthHandlerInterface is an autogenerated mock type for the AuthHandlerInterface type
type MockAuthHandlerInterface struct {
	mock.Mock
}

type MockAuthHandlerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthHandlerInterface) EXPECT() *MockAuthHandlerInterface_Expecter {
	return &MockAuthHandlerInterface_Expecter{mock: &_m.Mock}
}

// GoogleLogin provides a mock function with given fields: c
func (_m *MockAuthHandlerInterface) GoogleLogin(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GoogleLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthHandlerInterface_GoogleLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GoogleLogin'
type MockAuthHandlerInterface_GoogleLogin_Call struct {
	*mock.Call
}

// GoogleLogin is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockAuthHandlerInterface_Expecter) GoogleLogin(c interface{}) *MockAuthHandlerInterface_GoogleLogin_Call {
	return &MockAuthHandlerInterface_GoogleLogin_Call{Call: _e.mock.On("GoogleLogin", c)}
}

func (_c *MockAuthHandlerInterface_GoogleLogin_Call) Run(run func(c echo.Context)) *MockAuthHandlerInterface_GoogleLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockAuthHandlerInterface_GoogleLogin_Call) Return(_a0 error) *MockAuthHandlerInterface_GoogleLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthHandlerInterface_GoogleLogin_Call) RunAndReturn(run func(echo.Context) error) *MockAuthHandlerInterface_GoogleLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GoogleSignup provides a mock function with given fields: c
func (_m *MockAuthHandlerInterface) GoogleSignup(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GoogleSignup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthHandlerInterface_GoogleSignup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GoogleSignup'
type MockAuthHandlerInterface_GoogleSignup_Call struct {
	*mock.Call
}

// GoogleSignup is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockAuthHandlerInterface_Expecter) GoogleSignup(c interface{}) *MockAuthHandlerInterface_GoogleSignup_Call {
	return &MockAuthHandlerInterface_GoogleSignup_Call{Call: _e.mock.On("GoogleSignup", c)}
}

func (_c *MockAuthHandlerInterface_GoogleSignup_Call) Run(run func(c echo.Context)) *MockAuthHandlerInterface_GoogleSignup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockAuthHandlerInterface_GoogleSignup_Call) Return(_a0 error) *MockAuthHandlerInterface_GoogleSignup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthHandlerInterface_GoogleSignup_Call) RunAndReturn(run func(echo.Context) error) *MockAuthHandlerInterface_GoogleSignup_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: c
func (_m *MockAuthHandlerInterface) Login(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthHandlerInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthHandlerInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockAuthHandlerInterface_Expecter) Login(c interface{}) *MockAuthHandlerInterface_Login_Call {
	return &MockAuthHandlerInterface_Login_Call{Call: _e.mock.On("Login", c)}
}

func (_c *MockAuthHandlerInterface_Login_Call) Run(run func(c echo.Context)) *MockAuthHandlerInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockAuthHandlerInterface_Login_Call) Return(_a0 error) *MockAuthHandlerInterface_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthHandlerInterface_Login_Call) RunAndReturn(run func(echo.Context) error) *MockAuthHandlerInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: c
func (_m *MockAuthHandlerInterface) Logout(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthHandlerInterface_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthHandlerInterface_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockAuthHandlerInterface_Expecter) Logout(c interface{}) *MockAuthHandlerInterface_Logout_Call {
	return &MockAuthHandlerInterface_Logout_Call{Call: _e.mock.On("Logout", c)}
}

func (_c *MockAuthHandlerInterface_Logout_Call) Run(run func(c echo.Context)) *MockAuthHandlerInterface_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockAuthHandlerInterface_Logout_Call) Return(_a0 error) *MockAuthHandlerInterface_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthHandlerInterface_Logout_Call) RunAndReturn(run func(echo.Context) error) *MockAuthHandlerInterface_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function with given fields: c
func (_m *MockAuthHandlerInterface) Signup(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthHandlerInterface_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type MockAuthHandlerInterface_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockAuthHandlerInterface_Expecter) Signup(c interface{}) *MockAuthHandlerInterface_Signup_Call {
	return &MockAuthHandlerInterface_Signup_Call{Call: _e.mock.On("Signup", c)}
}

func (_c *MockAuthHandlerInterface_Signup_Call) Run(run func(c echo.Context)) *MockAuthHandlerInterface_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockAuthHandlerInterface_Signup_Call) Return(_a0 error) *MockAuthHandlerInterface_Signup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthHandlerInterface_Signup_Call) RunAndReturn(run func(echo.Context) error) *MockAuthHandlerInterface_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthHandlerInterface creates a new instance of MockAuthHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthHandlerInterface {
	mock := &MockAuthHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
