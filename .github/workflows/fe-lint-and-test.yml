name: Frontend CI

on:
  pull_request:
    branches: [ develop ]
    paths:
      - 'fe/**'
      - '.github/workflows/fe-lint-and-test.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./fe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: fe/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint
        continue-on-error: true

      - name: Run type check
        run: npm run build
        continue-on-error: false

      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false --passWithNoTests=false
        env:
          CI: true

      - name: Check test coverage thresholds
        run: |
          echo "Checking if coverage meets minimum thresholds..."
          # This will fail if coverage is below thresholds set in jest.config.js

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          directory: coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage summary if available
            let coverageInfo = 'üìä Coverage information not available';
            try {
              const coveragePath = path.join('coverage/coverage-summary.json');
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                
                const formatCoverage = (metric) => {
                  const pct = metric.pct;
                  const emoji = pct >= 80 ? '‚úÖ' : pct >= 60 ? '‚ö†Ô∏è' : '‚ùå';
                  return `${emoji} ${pct}% (${metric.covered}/${metric.total})`;
                };
                
                coverageInfo = `## üìä Test Coverage
            | Metric | Coverage |
            |--------|----------|
            | Lines | ${formatCoverage(total.lines)} |
            | Functions | ${formatCoverage(total.functions)} |
            | Branches | ${formatCoverage(total.branches)} |
            | Statements | ${formatCoverage(total.statements)} |`;
              }
            } catch (error) {
              console.log('Could not read coverage summary:', error);
            }
            
            // Determine overall status
            const success = '${{ job.status }}' === 'success';
            const statusIcon = success ? '‚úÖ' : '‚ùå';
            const statusText = success ? 'All checks passed!' : 'Some checks failed';
            
            const body = `## ${statusIcon} Frontend CI Results
            
            **Status**: ${statusText}
            
            ${coverageInfo}
            
            ### üîç Checks Run:
            - **Linting**: ‚ö†Ô∏è ESLint (Skipped - to be fixed later)
            - **Type Check**: ${success ? '‚úÖ' : '‚ùå'} TypeScript
            - **Tests**: ${success ? '‚úÖ' : '‚ùå'} Jest Unit Tests
            - **Coverage**: ${success ? '‚úÖ' : '‚ùå'} Coverage Report Generated
            
            ${success ? '' : '‚ö†Ô∏è **Please fix the failing checks before merging.**'}
            
            <details>
            <summary>üìã View detailed logs</summary>
            
            Check the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed output.
            
            </details>`;
            
            // Find existing comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Frontend CI Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }